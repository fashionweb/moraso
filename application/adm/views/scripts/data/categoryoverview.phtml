var east = Ext.getCmp('viewport-east');
east.setVisible(true);
east.expand(false);
east.removeAll();

var comboConfigSet = new Ext.form.ComboBox({
	store: <?php echo json_encode($this->configSets); ?>,
	typeAhead: true,
    mode: 'local',
    triggerAction: 'all',
    emptyText: '[inherit]',
    selectOnFocus: true,
    forceSelection: true
   });

var propsGrid = new Ext.grid.PropertyGrid({
	autoHeight: true,
	source: {
		name: '<?php echo $this->cat['name']; ?>',
		idcat: <?php echo $this->cat['idcat']; ?>,
		idcatlang: <?php echo $this->cat['idcatlang']; ?>,
		visible: <?php echo ($this->cat['visible'] == 1) ? 'true' : 'false'; ?>,
		public: <?php echo ($this->cat['public'] == 1) ? 'true' : 'false'; ?>,
		created: new Date(<?php echo $this->cat['createdts'] * 1000; ?>),
		lastmodified: new Date(<?php echo $this->cat['modifiedts'] * 1000; ?>),
		urlname: '<?php echo $this->cat['urlname']; ?>',
		configsetid: <?php echo empty($this->cat['configsetid']) ? 0 : $this->cat['configsetid']; ?>
	},
	customEditors: {
		configsetid: new Ext.grid.GridEditor(comboConfigSet)
	},
	customRenderers: {
        configsetid: function(v) {
        	var store = comboConfigSet.getStore();
            return store.getAt(store.findBy(function(record, id) {
            	return record.get('field1') == v;
            })).get('field2');
        }
    },
	viewConfig : {
		forceFit: true,
		scrollOffset: 2
	},
	listeners: {
		beforeedit: function(e) {
			if (/^name|configset|visible|public|urlname$/.test(e.record.id.toLowerCase())) {
				return;
			}
			e.cancel = true;
		},
		afteredit: function(e) {
			Ext.Ajax.request({
				url: '<?php echo $this->url(array('controller' => 'category', 'action' => 'update'), 'default'); ?>',
				success: function(response) {
					var r = Ext.decode(response.responseText);
					reloadTree('<?php echo $this->cat['idcat']; ?>', pagetree);
				},
				failure: function(response) {
					alert('Remote server did not respond correcty.');
				},
				params: {
					idcat: '<?php echo $this->cat['idcat']; ?>',
					property: e.record.id.toLowerCase(),
					value: e.value
				}
			});
		}
	}
});
    
east.add(propsGrid);

var center = Ext.getCmp('viewport-center');
center.removeAll();

var tabs = new Ext.TabPanel({
	resizeTabs: false,
	minTabWidth: 115,
	tabWidth:135,
	enableTabScroll:true,
	defaults: {
		autoScroll:true
	}
});

center.add(tabs);

Ext.getCmp('viewport').doLayout();

<?php foreach ($this->plugins as $plugin) : ?>
	Ext.Loader.load(['<?php echo $this->url(array('plugin' => $plugin->name, 'paction' => 'index', 'idcat' => $this->idcat), 'cplugin'); ?>'], null, this, false);
<?php endforeach; ?>

tabs.doLayout();