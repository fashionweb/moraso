var reloadTree = function(id, tree) {
	var node = tree.getNodeById(id);
	tree.getLoader().load(node.parentNode, function(n) {
		n.expand(false, false, function() {
			tree.getNodeById(node.attributes.id).expand(false, false);
		});
	});
}

var pagetree = 	new Ext.tree.TreePanel({
	id: 'pageview-cattree',
	title: '<?php echo $this->translate('Category tree'); ?>',
	useArrows: true,
	autoScroll: true,
	animate: true,
	enableDD: true,
	containerScroll: true,
	border: false,
	dataUrl: '<?php echo $this->url(array('controller' => 'data', 'action' => 'treesource'), 'default'); ?>',
	rootVisible: false,
	singleExpand: true,
	stopRestoring: false,
	root: {
		nodeType: 'async',
		text: 'Root',
		draggable: false,
		id: '0'
	},
	listeners: {
		click: function(node, event) {
			if (node.attributes.type == 'category') {
				node.expand();
				Ext.Loader.load(['<?php echo $this->url(array('controller' => 'data', 'action' => 'categoryoverview'), 'default'); ?>?id=' + node.id], null, this, false);
			} else {
				alert('open page: ' + node.id);
			}
		},
		beforemovenode: function(tree, node, oldParent, newParent, index) {
			 Ext.MessageBox.show({
			 	title: '<?php echo $this->translate('Move node'); ?>',
			 	msg: '<?php echo $this->translate('Are you sure to move the node to the specified place?'); ?>',
			 	buttons: Ext.MessageBox.OKCANCEL,
			 	fn: function(result) {
			 		if (result == 'ok') {
		            	if (node.attributes.type == 'category') {
		            		alert('move category');
		            	} else if (node.attributes.type == 'page') {
		            		alert('move page');
		            	}
			 		} else {
			 			var currentNode = tree.getRootNode();
			 			var path = oldParent.getPath().split('/');
			 			var doExpand = function(currentNode, path, i) {
			 				i++;
			 				if (i > path.length) return;
			 				expNode = currentNode.findChild('id', path[i]);
			 				if (expNode == null) return;
			 				expNode.expand(false, false, function() {
			 					doExpand(expNode, path, i);
			 				});
			 			}
			 			tree.getLoader().load(tree.getRootNode(), function() {
			 				doExpand(currentNode, path, 1);
			 			});
			 		}
			 	}
			 });
		},
		contextmenu: function(node) {
			if (node.attributes.type == 'category') {
				var menu = new Ext.menu.Menu();
	
				menu.addItem({
					text: node.attributes.online ? '<?php echo $this->translate('Set offline'); ?>' : '<?php echo $this->translate('Set online'); ?>',
					iconCls: node.attributes.online ? 'cm-setoffline' : 'cm-setonline',
					handler: function() {
						Ext.Ajax.request({
							url: '<?php echo $this->url(array('controller' => 'category', 'action' => 'setonline'), 'default'); ?>',
				            success: function(response, opts) {
				            	var rsp = Ext.decode(response.responseText);
				            	reloadTree(rsp.idcat, pagetree);
				            },
				            params: { idcat: node.attributes.id, status: node.attributes.online == 1 ? 0 : 1, propagate: 0 }
				        });   						
					}
				});
				
				menu.addItem('-');
			
				menu.addItem({
					text: '<?php echo $this->translate('New sub-category'); ?>',
					iconCls: 'cm-folder-new',
					handler: function() {
						Ext.Ajax.request({
							url: '<?php echo $this->url(array('controller' => 'category', 'action' => 'addnew'), 'default'); ?>',
				            success: function(response) {
				            	var rsp = Ext.decode(response.responseText);
				            	reloadTree(rsp.data.parent, pagetree);
				            },
				            params: { idcat: node.attributes.id }
				        });   						
					}
				});
				
				menu.addItem('-');

				menu.addItem({
					text: '<?php echo $this->translate('Add to favorites'); ?>',
					iconCls: 'cm-bookmark-category',
					handler: function() {
						alert('add to favorites');
					}
				});
			}
			
			menu.show(node.ui.getAnchor());
		}
	},
	stateEvents : ['collapsenode', 'expandnode'],
	stateId : '<?php echo 'categorytree-' . md5(__FILE__); ?>',
	stateful : true,
	getState : function () {
		var nodes = [];
		this.getRootNode().eachChild(function (child) {
			var storeTreeState = function (node, expandedNodes) {
				if(node.isExpanded() && node.childNodes.length > 0) {
					expandedNodes.push(node.getPath());
					node.eachChild(function (child) {
						storeTreeState(child, expandedNodes);
					});
				}
			};
			storeTreeState(child, nodes);
		});
		return {
			expandedNodes : nodes
		}
	},
	applyState : function (state) {
		var nodes = state.expandedNodes;
		for(var i = 0; i < nodes.length; i++) {
			if(typeof nodes[i] != 'undefined') {
				this.expandPath(nodes[i]);
			}
		}
	}
});

var recentlyOpenedPages = new Ext.grid.GridPanel({
	store: new Ext.data.ArrayStore({
		fields: [
			{name: 'id'},
			{name: 'name'},
			{name: 'category'}
		],
		data: <?php echo Aitsu_Util_Javascript :: getArrayString($this->articles, array('idart', 'title', 'name')); ?>
    }),
    columns: [
    	{dataIndex: 'name', header: 'Page', menuDisabled: true, sortable: true},
    	{dataIndex: 'category', header: 'Category', menuDisabled: true, sortable: true}
	],
	viewConfig: {
		forceFit: true,
		autoFill: true
	},
	border: false,
	title: '<?php echo $this->translate('Recently opened pages'); ?>'
});

var favorites = new Ext.grid.GridPanel({
	store: new Ext.data.ArrayStore({
		fields: [
			{name: 'id'},
			{name: 'category'}
		],
		data: <?php echo Aitsu_Util_Javascript :: getArrayString($this->favorites, array('idcat', 'name')); ?>
    }),
    columns: [
    	{dataIndex: 'category', header: 'Category', menuDisabled: true, sortable: true}
	],
	viewConfig: {
		forceFit: true,
		autoFill: true
	},
	border: false,
	title: '<?php echo $this->translate('Favorites'); ?>',
	listeners: {
		cellclick: function(grid, rowIndex, columnIndex, e) {
			var record = grid.getStore().getAt(rowIndex);
    		var data = record.get('id');
    		alert(data);
		}
	}
});

var west = Ext.getCmp('viewport-west');
west.setVisible(true);
west.expand(false);
west.removeAll();
west.add(new Ext.Panel({
	layout: 'accordion',
	border: false,
	layoutConfig: {
		titleCollapse: true,
        hideCollapseTool: true,
        animate: true
    },
	items: [
		pagetree,
		recentlyOpenedPages,
		favorites
	]
}));

var east = Ext.getCmp('viewport-east');
east.setVisible(false);

Ext.getCmp('viewport').doLayout();
