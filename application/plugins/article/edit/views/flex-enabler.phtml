(function( $ ){
	$.fn.enableFlexEditor = function() {

		var scrollTimerId;
		var scrolling = false;
		var bboffset = 0;
		var suppressHover = false;
		var markitup;
		
		var id = $(this).closest('.flexeditor').attr('id');
  		/([^-]*)-([^-]*)-(\d*)/.exec(id);
		var index = RegExp.$2;
		var idart = RegExp.$3;
		
		this.find('div.flexcontent').mouseenter(function() {
			$(this).hide();
			$(this).closest('.flexeditor').find('ul.flexcontent').show();
		});
		
		this.find('ul.flexcontent').mouseleave(function() {
			$(this).hide();
			$(this).closest('.flexeditor').find('div.flexcontent').show();
		});
		
		this.find('ul.flexcontent').mouseover(function(e){
			e.stopPropagation();
		});
		
		/*
		 * As mouse events are not propagated above the current document
		 * boundaries this must be done explicitly.
		 */
		this.find('ul.flexcontent').on({
			mousemove: function(event) {
				$(parent.document).trigger(event);
			},
			mouseup: function(event) {
				$(parent.document).trigger(event);
			}
		});
		
		this.find('.buttonbar button.add span').css({
			'background-image': 'url(/adm/images/flex-ui-icons.png)',
			'background-position': '-16px -128px'
		})
		.attr('title', 'Add a block below the current position.');
		
		this.find('.buttonbar button.edit span').css({
			'background-image': 'url(/adm/images/flex-ui-icons.png)',
			'background-position': '-64px -112px'
		})
		.attr('title', 'Edit current block.');
		
		this.find('.buttonbar button.trash span').css({
			'background-image': 'url(/adm/images/flex-ui-icons.png)',
			'background-position': '-176px -96px'
		})
		.attr('title', 'Remove current block.')
		
		this.find('.buttonbar button.add').click(function() {
			var pos = $(this).closest('li').find('a.position').attr('href');
			var editor = $(this).closest('.flexeditor');
			alert('hier kommt die modulauswahl hin');
		});
		
		this.find('.buttonbar button.edit').click(function() {
			var pos = $(this).closest('li').find('a.position').attr('href');
			var element = $(this).closest('li');
			var editor = $(this).closest('.flexeditor');
			element.find('div.content').css('display', 'none');
			element.find('div.editor').css('display', 'block');
			suppressHover = true;
			element.find('div.buttonbar').css({
				'display': 'none'
			});
			element.css({
				'background': 'none'
			});
			var setting = myFlexSettings;
			setting.markupSet.splice(setting.markupSet.length - 2, 2);
			setting.markupSet = setting.markupSet.concat({name:'Save', call: function() {
				$.post($('#edit-iframe-' + idart).attr('src'), {
						renderOnly: "Flex:" + index,
						edit: 1,
						pos: pos,
						content: markitup.val()
					},function(data) {
						var flexcontent = $('#' + id, data).html();
						editor.html(flexcontent);
						$(document).trigger('edit-page-content', [$('#edit-iframe-' + idart)]);
					});				
			}, className:'preview'});
			setting.markupSet = setting.markupSet.concat({name:'Cancel', call: function() {
				suppressHover = false;
				element.find('div.editor').css('display', 'none');
				element.find('div.content').css('display', 'block');
				element.trigger('mouseenter');
			}, className:'preview'});
			markitup = element.find('div.editor > textarea').markItUp(setting);
		});
		
		this.find('.buttonbar button.trash').click(function() {
			var pos = $(this).closest('li').find('a.position').attr('href');
			var editor = $(this).closest('.flexeditor');
			Ext.aitsu.confirm({
				title: '<?php echo $this->translate('Delete entry'); ?>',
				msg: '<?php echo $this->translate('Are you sure to delete the selected entry?'); ?>',
				ok: function() {
					$.post($('#edit-iframe-' + idart).attr('src'), {
							renderOnly: "Flex:" + index,
							edit: 1,
							del: pos
						},function(data) {
							var flexcontent = $('#' + id, data).html();
							editor.html(flexcontent);
							$(document).trigger('edit-page-content', [$('#edit-iframe-' + idart)]);
						});
				},
				cancel: function() {
				}
			});
			
		});
		
		this.find('ul.flexcontent > li').hover(
			function() {
				if (suppressHover) {
					return;
				}
				$(this).find('div.buttonbar').css({
					'display': 'block'
				});
				$(this).css({
					'background-color': '#DDD',
					'opacity': '0.8'
				});
			},
			function() {
				$(this).find('div.buttonbar').css('display', 'none');
				$(this).css({
					'background': 'none',
					'opacity': '1'
				});
			});
		
		this.find('ul.flexcontent').sortable({
			axis: 'y',
			handle: 'div.buttonbar',
			forceHelperSize: true,
			forcePlaceholderSize: true,
			placeholder: "placeholder",
			opacity: 0.1,
			update: function(event, ui) {
				var editor = $(this).closest('.flexeditor');
				var newpos = $(this).find('li > a.position').map(function(index) {
					return $(this).attr('href');
				}).get();
				$.post($('#edit-iframe-' + idart).attr('src'), {
					renderOnly: "Flex:" + index,
					edit: 1,
					newpos: newpos
				},function(data) {
					var flexcontent = $('#' + id, data).html();
					editor.html(flexcontent);
					$(document).trigger('edit-page-content', [$('#edit-iframe-' + idart)]);
				});
			},
			start: function(event, ui) {
				moving = true;
				suppressHover = true;
				$(this).closest('.flexeditor').find('div.buttonbar').hide();
  				/([^-]*)-([^-]*)-(\d*)/.exec($(this).closest('.flexeditor').attr('id'));
				var cframe =  $('#edit-iframe-' + RegExp.$3);
				var sbar = cframe.contents().find('body');
				var distance = 0;
				var maxOffset = $(this).closest('div').offset().top + $(this).height() - cframe.height() + 50;
				var minOffset = $(this).closest('div').offset().top;
				$(this).bind('mousemove', function(e) {				
					if (!scrolling && (sbar.scrollTop() + cframe.height() - e.pageY < 100 || e.pageY - sbar.scrollTop() < 100)) {
						scrolling = true;
						scrollTimerId = window.setInterval(function() {
							if (distance > 0) {
								sbar.scrollTop(Math.min(sbar.scrollTop() + distance, maxOffset));
							} else {
								sbar.scrollTop(Math.max(sbar.scrollTop() + distance, minOffset));
							}
							if (sbar.scrollTop() >= maxOffset || sbar.scrollTop() <= minOffset) {
								distance = 0;
								scrolling = false;
								window.clearInterval(scrollTimerId);
								return;
							}
						}, 10);
					}
					if (sbar.scrollTop() + cframe.height() - e.pageY < 100) {
						distance = 200 / (sbar.scrollTop() + cframe.height() - e.pageY);
					} else if (e.pageY - sbar.scrollTop() < 100) {
						distance = -200 / (e.pageY - sbar.scrollTop());
					} else {
						distance = 0;
						scrolling = false;
						window.clearInterval(scrollTimerId);
					}
				});
			},
			stop: function(event, ui) {
				moving = false;
				suppressHover = false;
				$(this).closest('.flexeditor').find('div.buttonbar').hide();
				window.clearInterval(scrollTimerId);
				$(this).unbind('mousemove');
			},
			sort: function(event, ui) { 
				/([^-]*)-([^-]*)-(\d*)/.exec($(this).closest('.flexeditor').attr('id'));
				var cframe =  $('#edit-iframe-' + RegExp.$3);
				var sbar = cframe.contents().find('body');
        		ui.helper.css({'top' : ui.position.top + sbar.scrollTop() + 'px'});
    		}
		});
	};
})( jQuery );
