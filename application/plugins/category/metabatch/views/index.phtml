

var pagetree = Ext.getCmp('pageview-cattree');

var metabatch_title_e = new Ext.form.TextField({
	css: 'border: 1px solid red'
});
var metabatch_pagetitle_e = new Ext.form.TextField();
var metabatch_urlname_e = new Ext.form.TextField();


var metabatchgrid = new Ext.grid.EditorGridPanel ({
	title: '<?php echo addslashes($this->title); ?>',
	store: new Ext.data.JsonStore({
		url: '<?php echo $this->url(array('paction' => 'catarttree')); ?>',
		root: 'data',
		fields: [
			'id',
			{name:'level',type:'int'},
			'type',
			'title',
			'pagetitle',
			'urlname',
			'online',
			'author',
			'published',
			'isstart'
		],
		autoLoad: {
			params: {
				idcat: <?php echo $this->idcat; ?>
			}
		}
	}),
    columns: [
    	{
    		xtype: 'actioncolumn',
    		width: 35,
    		menuDisabled: true, 
            sortable: false,
    		items: [
    			{
                    getClass: function(v, meta, rec) {
                    	if (rec.get('online') == 1) {
                    		this.items[0].tooltip = 'Online';
                    		return 'page-online';
                    	} else {
                    		this.items[0].tooltip = 'Offline';
                    		return 'page-offline';
                    	}
                    },
                    handler: function(grid, rowIndex, colIndex) {
						Ext.Ajax.request({
							url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'toggleonline'), 'default'); ?>',
				            success: function(response, opts) {
				            	var rsp = Ext.decode(response.responseText);
				            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
				            	art.set('online', rsp.online);
				            	art.set('published', 0); 
				            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
				            	pagetree.getLoader().load(node, function() {node.expand()});
				            },
				            params: { idart: categories.getStore().getAt(rowIndex).get('id') }
				        });                    	
                    }
                },
    			{
                    getClass: function(v, meta, rec) {
                    	if (rec.get('published') == 1) {
                    		this.items[1].tooltip = 'Published';
                    		return 'page-published';
                    	} else if(rec.get('published') == -1) {
                    		this.items[1].tooltip = 'Unpublished';
                    		return 'VOID';
                    	} else {
                    		this.items[1].tooltip = 'Unpublished';
                    		return 'page-unpublished';
						}
                    },
                    handler: function(grid, rowIndex, colIndex) {
                    	if (categories.getStore().getAt(rowIndex).get('published') == 0) {
							Ext.Ajax.request({
								url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'startpublishing'), 'default'); ?>',
					            success: function(response, opts) {
					            	var rsp = Ext.decode(response.responseText);
					            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
					            	art.set('published', 1); 
					            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
					            	pagetree.getLoader().load(node, function() {node.expand()});
					            },
					            params: { idart: categories.getStore().getAt(rowIndex).get('id') }
					        });
                    	}
                    }
                },
    			{
                    getClass: function(v, meta, rec) {
                    	if (rec.get('isstart') == 1) {
                    		this.items[2].tooltip = 'Index article';
                    		return 'page-indexpage';
                    	}
                    }
                }
             ]
        },
    	{dataIndex: 'id', header: 'ID', menuDisabled: true, sortable: true, width: 30},
    	{dataIndex: 'title', header: '<?php echo Aitsu_Translate :: translate('Title'); ?>', editor: metabatch_title_e, menuDisabled: false, sortable: true,
			renderer: function(value, metaData, record, rowIndex, colIndex, store) {
				if( record.data.type == 'art' ) {
					metaData.attr = 'style="text-indent:12px; margin-left:'+((record.data.level+0.1)*1.5)+'em;background:url(/adm/images/icons/bullet_green.png) 0px 2px no-repeat;"';
				}
				else {
					metaData.attr = 'style="text-indent:12px; margin-left:'+((record.data.level+0.1)*1.5)+'em;background:url(/adm/images/icons/folder.png) 0px 2px no-repeat;"';
				}
				// console.log( record.data.level );
				return value;
			}
		},
    	{dataIndex: 'pagetitle', header: '<?php echo Aitsu_Translate :: translate('Page title'); ?>', editor: metabatch_pagetitle_e, menuDisabled: false, sortable: true},
    	{dataIndex: 'urlname', header: '<?php echo Aitsu_Translate :: translate('URL name'); ?>', editor: metabatch_urlname_e, menuDisabled: false, sortable: true},
    	{dataIndex: 'author', header: '<?php echo Aitsu_Translate :: translate('Author'); ?>', menuDisabled: false, sortable: true}
	],
	viewConfig: {
		forceFit: true,
		autoFill: true
	},
	border: false,
	tbar: {
		items: [
			{
	            tooltip: 'Save changes to meta data',
	            iconCls: 'save',
				text: 'Save changes',
	            handler: function(b, e) {
					metabatchgrid.stopEditing();
					var changes = new Array();
					var dirty = metabatchgrid.store.getModifiedRecords();
					for ( var i = 0 ; i < dirty.length ; i++ ) {
						var id = dirty[i].get( 'id' );
						var fields = dirty[i].getChanges();
						fields.id = dirty[i].get( 'id' );
						changes.push( fields );
					}
					console.log( changes );
					metabatchgrid.submitChanges( changes );
					metabatchgrid.store.commitChanges();
				}
			},
			{
	            iconCls: 'cancel',
				text: 'Discard Changes',
				handler: function() {
					if( confirm( 'All edits will be lost! Are you sure?' ) ) {
						metabatchgrid.stopEditing();
						metabatchgrid.store.rejectChanges();
					}
				}
			}
	    ] // toolbar items
	}, // toolbar

	submitChanges: function( data ) {
		Ext.Ajax.request({
			url:        '<?php echo $this->url(array('paction' => 'savechanges')); ?>',
			success:    function() {
				metabatchgrid.store.reload();
				Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Save Meta Data'); ?>', '<?php echo Aitsu_Translate :: translate('Your changes have been saved.'); ?>');
			},				            				
			params:     { changes: Ext.util.JSON.encode( data ) }
		});
	},

	
	listeners: {

		afteredit: function(e){
			// e.record contains modified element
		},

		rowcontextmenu: function(grid, rowIndex, event) {
			
			this.getSelectionModel().selectRow(rowIndex);
			var record = this.getStore().getAt(rowIndex);
			var menu = new Ext.menu.Menu();

			menu.addItem({
				text: '<?php echo $this->translate('Set as index'); ?>',
				iconCls: 'cm-indexpage',
				handler: function() {
					Ext.Ajax.request({
						url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'makeindex'), 'default'); ?>',
			            success: function(response, opts) {
			            	var rsp = Ext.decode(response.responseText);
			            	
			            	if (rsp.success) {
			            		var index = categories.getStore().find('isstart', 1);
			            		var art;
			            		
			            		if (index > -1) {
					            	art = categories.getStore().getAt(index);
					            	art.set('isstart', 0);
			            		}
				            	
				            	art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
				            	art.set('isstart', 1);
				            	
				            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
				            	pagetree.getLoader().load(node, function() {node.expand()});
			            	}
			            },
			            params: { idart: record.get('id') }
			        });
				}
			});
			
			menu.addItem('-');
			
			menu.addItem({
				text: record.get('online') == 1 ? '<?php echo $this->translate('Set offline'); ?>' : '<?php echo $this->translate('Set online'); ?>',
				iconCls: record.get('online') == 1 ? 'page-offline' : 'page-online',
				handler: function() {
					Ext.Ajax.request({
						url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'toggleonline'), 'default'); ?>',
			            success: function(response, opts) {
			            	var rsp = Ext.decode(response.responseText);
			            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
			            	art.set('online', rsp.online);
			            	art.set('published', 0); 
			            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
			            	pagetree.getLoader().load(node, function() {node.expand()});
			            },
			            params: { idart: record.get('id') }
			        });
				}
			});				
			
			if (record.get('published') == 0) {
				menu.addItem({
					text: '<?php echo $this->translate('Publish'); ?>',
					iconCls: 'page-published',
					handler: function() {
						Ext.Ajax.request({
							url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'startpublishing'), 'default'); ?>',
				            success: function(response, opts) {
				            	var rsp = Ext.decode(response.responseText);
				            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
				            	art.set('published', 1); 
				            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
				            	pagetree.getLoader().load(node, function() {node.expand()});
				            },
				            params: { idart: record.get('id') }
				        });
					}
				});				
			}
			
			menu.addItem('-');
			
			menu.addItem({
				text: '<?php echo $this->translate('Cut'); ?>',
				iconCls: 'cut',
				handler: function() {
					Ext.state.Manager.set('cut-page', record.data);
					Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Page cut'); ?>', '<?php echo Aitsu_Translate :: translate('The selected page has been put to the clipboard.'); ?>');
				}
			});
			
			menu.addItem({
				text: '<?php echo $this->translate('Delete'); ?>',
				iconCls: 'delete',
				handler: function() {
					 Ext.MessageBox.show({
					 	title: '<?php echo $this->translate('Delete page'); ?>',
					 	msg: '<?php echo $this->translate('Are you sure to delete the selected page?'); ?>',
					 	buttons: Ext.MessageBox.OKCANCEL,
					 	fn: function(result) {
					 		if (result == 'ok') {
				            	Ext.Ajax.request({
				            		url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'delete'), 'default'); ?>',
				            		success: function(response, opts) {
				            			var rsp = Ext.decode(response.responseText);
				            			if (rsp.success) {
				            				Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Page deleted'); ?>', '<?php echo Aitsu_Translate :: translate('The selected page has been removed.'); ?>');
					            			var store = categories.getStore(); 
					            			store.remove(record);
					            			var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
					            			pagetree.getLoader().load(node, function() {node.expand()});
				            			}
				            		},
				            		params: { idart: record.get('id') }
				            	});					 			
					 		}
					 	}
					 });
				}
			});
			
			menu.showAt(event.getXY());
		}
	}
});

Ext.getCmp('center-tabs').add(metabatchgrid);
