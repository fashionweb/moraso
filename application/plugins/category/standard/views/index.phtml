var editPage = function(id) {
	Ext.aitsu.load(['<?php echo $this->url(array('controller' => 'data', 'action' => 'edit'), 'default'); ?>'], function() {
		Ext.getCmp('viewport').doLayout();
		Ext.getCmp('page-edit-tab').activate(0);
		Ext.getCmp('rop').getStore().load();
	}, {id: id});
}

var reloadTree = function(id, tree) {
	var node = tree.getNodeById(id);
	if (node.id == 0) {
		tree.getLoader().load(tree.getRootNode());
	}
	tree.getLoader().load(node.parentNode, function(n) {
		n.expand(false, false, function() {
			tree.getNodeById(node.attributes.id).expand(false, false);
		});
	});
}

var pagetree = Ext.getCmp('pageview-cattree');

var categories = new Ext.grid.GridPanel({
	title: '<?php echo addslashes($this->categoryname); ?>',
	store: new Ext.data.JsonStore({
		url: '<?php echo $this->url(array('paction' => 'articles')); ?>',
		root: 'data',
		fields: [{name:'id',type:'int'}, 'title', 'pagetitle', 'urlname', 'online', 'published', 'isstart'],
		autoLoad: {
			params: {
				idcat: <?php echo $this->idcat; ?>
			}
		}
	}),
    columns: [
    	{
    		xtype: 'actioncolumn',
    		width: 30,
    		menuDisabled: true, 
            sortable: false,
    		items: [
    			{
                    getClass: function(v, meta, rec) {
                    	if (rec.get('online') == 1) {
                    		this.items[0].tooltip = 'Online';
                    		return 'page-online';
                    	} else {
                    		this.items[0].tooltip = 'Offline';
                    		return 'page-offline';
                    	}
                    },
                    handler: function(grid, rowIndex, colIndex) {
						Ext.Ajax.request({
							url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'toggleonline'), 'default'); ?>',
				            success: function(response, opts) {
				            	var rsp = Ext.decode(response.responseText);
				            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
				            	art.set('online', rsp.online);
				            	art.set('published', 0); 
				            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
				            	pagetree.getLoader().load(node, function() {node.expand()});
				            },
				            params: { idart: categories.getStore().getAt(rowIndex).get('id') }
				        });                    	
                    }
                },
    			{
                    getClass: function(v, meta, rec) {
                    	if (rec.get('published') == 1) {
                    		this.items[1].tooltip = 'Published';
                    		return 'page-published';
                    	} else {
                    		this.items[1].tooltip = 'Unpublished';
                    		return 'page-unpublished';
                    	}
                    },
                    handler: function(grid, rowIndex, colIndex) {
                    	if (categories.getStore().getAt(rowIndex).get('published') == 0) {
							Ext.Ajax.request({
								url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'startpublishing'), 'default'); ?>',
					            success: function(response, opts) {
					            	var rsp = Ext.decode(response.responseText);
					            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
					            	art.set('published', 1); 
					            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
					            	pagetree.getLoader().load(node, function() {node.expand()});
					            },
					            params: { idart: categories.getStore().getAt(rowIndex).get('id') }
					        });
                    	}
                    }
                },
    			{
                    getClass: function(v, meta, rec) {
                    	if (rec.get('isstart') == 1) {
                    		this.items[2].tooltip = 'Index article';
                    		return 'page-indexpage';
                    	}
                    }
                }
             ]
        },
    	{dataIndex: 'id', header: 'ID', menuDisabled: true, sortable: true, width: 20},
    	{dataIndex: 'title', header: '<?php echo Aitsu_Translate :: translate('Title'); ?>', menuDisabled: true, sortable: true},
    	{dataIndex: 'pagetitle', header: '<?php echo Aitsu_Translate :: translate('Page title'); ?>', menuDisabled: true, sortable: true},
    	{dataIndex: 'urlname', header: '<?php echo Aitsu_Translate :: translate('URL name'); ?>', menuDisabled: true, sortable: true}
	],
	viewConfig: {
		forceFit: true,
		autoFill: true
	},
	border: false,
	tbar: {
		items: [
			{
	            tooltip: 'Add new article',
	            iconCls: 'tb-add',
	            handler: function(b, e) {
	            	Ext.Ajax.request({
	            		url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'newarticle'), 'default'); ?>',
	            		success: function(response, opts) {
                                Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Created'); ?>', '<?php echo Aitsu_Translate :: translate('Article has been created.'); ?>');
	            			var rsp = Ext.decode(response.responseText);
	            			rsp.id = rsp.idart;
                                        Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Loading'); ?>', '<?php echo Aitsu_Translate :: translate('Article is loading...'); ?>');
                                        editPage(rsp.id);
	            			var store = categories.getStore();
	            			store.addSorted(new store.recordType(rsp));  
	            			var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
					pagetree.getLoader().load(node, function() {node.expand()});  
	            		},
	            		params: { idcat: '<?php echo $this->idcat; ?>' }
	            	});
	            }
	        },
	        {
	        	tooltip: Ext.state.Manager.get('cut-page', null) != null ? 'Paste article (ID ' + Ext.state.Manager.get('cut-page').id + ')' : '',
	        	iconCls: 'paste',
	        	disabled: Ext.state.Manager.get('cut-page', null) == null,
	        	handler: function(b, e) {
	            	Ext.Ajax.request({
	            		url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'movepage'), 'default'); ?>',
	            		success: function(response, opts) {
	            			var rsp = Ext.decode(response.responseText);
	            			rsp = rsp.data;
	            			rsp.id = rsp.idart;
	            			var store = categories.getStore();
	            			store.addSorted(new store.recordType(rsp));  
	            			pagetree.getNodeById('idart-' + Ext.state.Manager.get('cut-page').id).remove(true);
	            			var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
						    pagetree.getLoader().load(node, function() {node.expand()});         			
			        		b.disable();
			        		b.setTooltip('');
			        		Ext.state.Manager.clear('cut-page');
	            		},
	            		params: {
	            			idcat: '<?php echo $this->idcat; ?>',
	            			idart: Ext.state.Manager.get('cut-page').id
	            		}
	            	});
	        	}
	        }
	    ]
	},
	listeners: {
		celldblclick: function(grid, rowIndex, columnIndex, e) {
			editPage(this.getStore().getAt(rowIndex).get('id'));
		},
		rowcontextmenu: function(grid, rowIndex, event) {
			
			this.getSelectionModel().selectRow(rowIndex);
			var record = this.getStore().getAt(rowIndex);
			var menu = new Ext.menu.Menu();

			menu.addItem({
				text: '<?php echo $this->translate('Set as index'); ?>',
				iconCls: 'cm-indexpage',
				handler: function() {
					Ext.Ajax.request({
						url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'makeindex'), 'default'); ?>',
			            success: function(response, opts) {
			            	var rsp = Ext.decode(response.responseText);
			            	
			            	if (rsp.success) {
			            		var index = categories.getStore().find('isstart', 1);
			            		var art;
			            		
			            		if (index > -1) {
					            	art = categories.getStore().getAt(index);
					            	art.set('isstart', 0);
			            		}
				            	
				            	art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
				            	art.set('isstart', 1);
				            	
				            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
				            	pagetree.getLoader().load(node, function() {node.expand()});
			            	}
			            },
			            params: { idart: record.get('id') }
			        });
				}
			});
			
			menu.addItem('-');
			
			menu.addItem({
				text: record.get('online') == 1 ? '<?php echo $this->translate('Set offline'); ?>' : '<?php echo $this->translate('Set online'); ?>',
				iconCls: record.get('online') == 1 ? 'page-offline' : 'page-online',
				handler: function() {
					Ext.Ajax.request({
						url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'toggleonline'), 'default'); ?>',
			            success: function(response, opts) {
			            	var rsp = Ext.decode(response.responseText);
			            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
			            	art.set('online', rsp.online);
			            	art.set('published', 0); 
			            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
			            	pagetree.getLoader().load(node, function() {node.expand()});
			            },
			            params: { idart: record.get('id') }
			        });
				}
			});				
			
			if (record.get('published') == 0) {
				menu.addItem({
					text: '<?php echo $this->translate('Publish'); ?>',
					iconCls: 'page-published',
					handler: function() {
						Ext.Ajax.request({
							url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'startpublishing'), 'default'); ?>',
				            success: function(response, opts) {
				            	var rsp = Ext.decode(response.responseText);
				            	var art = categories.getStore().getAt(categories.getStore().find('id', rsp.idart));
				            	art.set('published', 1); 
				            	var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
				            	pagetree.getLoader().load(node, function() {node.expand()});
				            },
				            params: { idart: record.get('id') }
				        });
					}
				});				
			}
			
			menu.addItem('-');
			
			menu.addItem({
				text: '<?php echo $this->translate('Cut'); ?>',
				iconCls: 'cut',
				handler: function() {
					Ext.state.Manager.set('cut-page', record.data);
					Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Page cut'); ?>', '<?php echo Aitsu_Translate :: translate('The selected page has been put to the clipboard.'); ?>');
				}
			});
			
			menu.addItem({
				text: '<?php echo $this->translate('Delete'); ?>',
				iconCls: 'delete',
				handler: function() {
					 Ext.MessageBox.show({
					 	title: '<?php echo $this->translate('Delete page'); ?>',
					 	msg: '<?php echo $this->translate('Are you sure to delete the selected page?'); ?>',
					 	buttons: Ext.MessageBox.OKCANCEL,
					 	fn: function(result) {
					 		if (result == 'ok') {
				            	Ext.Ajax.request({
				            		url: '<?php echo $this->url(array('controller' => 'data', 'action' => 'delete'), 'default'); ?>',
				            		success: function(response, opts) {
				            			var rsp = Ext.decode(response.responseText);
				            			if (rsp.success) {
				            				Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Page deleted'); ?>', '<?php echo Aitsu_Translate :: translate('The selected page has been removed.'); ?>');
					            			var store = categories.getStore(); 
					            			store.remove(record);
					            			var node = pagetree.getNodeById('<?php echo $this->idcat; ?>');
					            			pagetree.getLoader().load(node, function() {node.expand()});
				            			}
				            		},
				            		params: { idart: record.get('id') }
				            	});					 			
					 		}
					 	}
					 });
				}
			});
			
			menu.showAt(event.getXY());
		}
	}
});

Ext.getCmp('center-tabs').add(categories);
