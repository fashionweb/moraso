var center = Ext.getCmp('viewport-center');
center.removeAll();

var configurationTabs = new Ext.TabPanel({
    id: 'configuration-tabs',
    resizeTabs: false,
    minTabWidth: 115,
    tabWidth:135,
    enableTabScroll:true,
    defaults: {
        autoScroll:true
    }
});

center.add(configurationTabs);

Ext.getCmp('viewport').doLayout();

var reader = new Ext.data.JsonReader({
    idProperty: 'id',
    root: 'data',
    fields: [
        {
            name: 'id',
            type: 'int'
        }, {
            name: 'config',
            type: 'String'
        }, {
            name: 'env',
            type: 'String',
            sortType: function(value) {
                switch (value.toLowerCase()){
                    case 'default': return 1;
                    case 'live': return 2;
                    case 'prod': return 3;
                    case 'staging': return 4;
                    case 'preprod': return 5;
                    case 'dev': return 6;
                }
            }
        }, {
            name: 'identifier',
            type: 'String'
        }, {
            name: 'value',
            type: 'String'
        }
    ]
});

var store = new Ext.data.GroupingStore({
    reader: reader,
    url: '<?php echo $this->url(array('paction' => 'store')); ?>',
    groupField: 'env',
    autoLoad: true
});
                
var configurationGrid = new Ext.grid.GridPanel({
    title: '<?php echo Aitsu_Translate::translate('Configuration'); ?> (<?php echo Aitsu_Translate::translate('Overall'); ?>)',
    id: 'configurationGrid',
    store: store,
    columns: [
        {dataIndex: 'config', width: 100, fixed: true, header: '<?php echo Aitsu_Translate::translate('Config'); ?>', sortable: true},
    	{dataIndex: 'env', width: 100, header: '<?php echo Aitsu_Translate::translate('Environment'); ?>', sortable: true},
    	{dataIndex: 'identifier', header: '<?php echo Aitsu_Translate::translate('Identifier'); ?>', sortable: true},
        {dataIndex: 'value', width: 60, header: '<?php echo Aitsu_Translate::translate('Value'); ?>', sortable: true}
    ],
    view: new Ext.grid.GroupingView({
        forceFit:true,
        groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "Configurations" : "Configuration"]})'
    }),
    viewConfig: {
        forceFit: true,
        autoFill: true
    },
    tbar: {
        items: [{
            tooltip: '<?php echo Aitsu_Translate::translate('Add new Configuration'); ?>',
            iconCls: 'tb-add',
            handler: function(b, e) {
                Ext.aitsu.load(['<?php echo $this->url(array('paction' => 'edit')); ?>']);
            }
        }, {
            tooltip: '<?php echo Aitsu_Translate :: translate('Refresh list'); ?>',
            iconCls: 'tb-refresh',
            handler: function(b, e) {
                Ext.getCmp('configurationGrid').getStore().load();
            }
        }]
    },
	listeners: {
		rowclick: function(grid, rowIndex, event) {
			var rec = grid.getStore().getAt(rowIndex);
			Ext.aitsu.load(['<?php echo $this->url(array('paction' => 'edit')); ?>'], null, {
				id: rec.get('id')
			});
		},
		rowcontextmenu: function(grid, rowIndex, event) {
			
			this.getSelectionModel().selectRow(rowIndex);
			var record = this.getStore().getAt(rowIndex);
			
			var menu = new Ext.menu.Menu();
			
			menu.addItem({
				text: '<?php echo $this->translate('Delete'); ?>',
				iconCls: 'delete',
				handler: function() {
					 Ext.MessageBox.show({
					 	title: '<?php echo $this->translate('Delete Configuration'); ?>',
					 	msg: '<?php echo $this->translate('Are you sure to delete the selected configuration?'); ?>',
					 	buttons: Ext.MessageBox.OKCANCEL,
					 	fn: function(result) {
					 		if (result == 'ok') {
				            	Ext.Ajax.request({
				            		url: '<?php echo $this->url(array('paction' => 'delete')); ?>',
				            		success: function(response, opts) {
				            			var rsp = Ext.decode(response.responseText);
				            			if (rsp.success) {
				            				Ext.aitsu.msg('<?php echo Aitsu_Translate::translate('Configuration removed'); ?>', '<?php echo Aitsu_Translate::translate('The selected rewrite rule has been removed.'); ?>');
					            			grid.getStore().load(); 
				            			}
				            		},
				            		params: { id: record.get('id') }
				            	});					 			
					 		}
					 	}
					 });
				}
			});
			
			menu.showAt(event.getXY());
		}		
	}
});

configurationTabs.add(configurationGrid);

var configurationCacheGrid = new Ext.grid.GridPanel({
    title: '<?php echo Aitsu_Translate::translate('Configuration'); ?> (<?php echo Aitsu_Translate::translate('Cache'); ?>)',
    disabled: true
});

configurationTabs.add(configurationCacheGrid);

var configurationLuceneGrid = new Ext.grid.GridPanel({
    title: '<?php echo Aitsu_Translate::translate('Configuration'); ?> (<?php echo Aitsu_Translate::translate('Lucene'); ?>)',
    disabled: true
});

configurationTabs.add(configurationLuceneGrid);

var configurationRewritungGrid = new Ext.grid.GridPanel({
    title: '<?php echo Aitsu_Translate::translate('Configuration'); ?> (<?php echo Aitsu_Translate::translate('Rewritung'); ?>)',
    disabled: true
});

configurationTabs.add(configurationRewritungGrid);

configurationTabs.setActiveTab(0);
configurationTabs.doLayout();