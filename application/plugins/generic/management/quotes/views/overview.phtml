var quotesGrid = new Ext.grid.GridPanel({
    id: 'quotesGrid',
    title: '<?php echo Aitsu_Translate :: translate('Quotes'); ?>',
    store: new Ext.data.JsonStore({
        autoDestroy: true,
        url: '<?php echo $this->url(array('paction' => 'store')); ?>',
        remoteSort: false,
        storeId: 'quoteStore',
        root: 'data',
        fields: [{
	        name: 'id',
                type: 'int'
	    }, {
                name: 'author'
            }, {
                name: 'quote'
            }, {
                name: 'class'
            }]
    }),
    columns: [
        {dataIndex: 'id', header: '<?php echo Aitsu_Translate :: translate('#'); ?>', width: 4, sortable: true, menuDisabled: true},
        {dataIndex: 'author', header: '<?php echo Aitsu_Translate :: translate('Author'); ?>', width: 16, sortable: true, menuDisabled: true},
        {dataIndex: 'quote', header: '<?php echo Aitsu_Translate :: translate('Quote'); ?>', sortable: true, menuDisabled: true},
        {dataIndex: 'class', header: '<?php echo Aitsu_Translate :: translate('Class'); ?>', sortable: true, menuDisabled: true}
    ],
    viewConfig: {
        forceFit: true,
        autoFill: true
    },
    border: false,
    tbar: {
        items: [{
            tooltip: '<?php echo Aitsu_Translate :: translate('Refresh list'); ?>',
            iconCls: 'tb-refresh',
            handler: function(b, e) {    
                quotesGrid.getStore().load({
                    callback: Ext.aitsu.mask(true),
                    callback: function(r, options, success) {
                        Ext.aitsu.mask(false);
                    }
                });
            }
        }, {
            tooltip: '<?php echo Aitsu_Translate :: translate('Add new quote'); ?>',
	    iconCls: 'tb-add',
	    handler: function(b, e) {
                Ext.aitsu.load(['<?php echo $this->url(array('paction' => 'edit')); ?>']);
            }
        }]
    },
    listeners: {
        render: {
            fn: function(){
                this.getStore().load();
            }
        },
        rowclick: function(grid, rowIndex, quote) {
            var rec = grid.getStore().getAt(rowIndex);
            Ext.aitsu.load(['<?php echo $this->url(array('paction' => 'edit')); ?>'], null, {
                id: rec.get('id')
            });
	},
        rowcontextmenu: function(grid, rowIndex, quote) {
            this.getSelectionModel().selectRow(rowIndex);
            var record = this.getStore().getAt(rowIndex);
            
            var menu = new Ext.menu.Menu();
                        
            menu.addItem({
                text: '<?php echo $this->translate('Edit'); ?>',
		iconCls: 'edit',
		handler: function() {
                    var rec = grid.getStore().getAt(rowIndex);
                    Ext.aitsu.load(['<?php echo $this->url(array('paction' => 'edit')); ?>'], null, {
                        id: record.get('id')
                    });				 			         
		}
            });
            
            menu.addItem({
                text: '<?php echo $this->translate('Delete'); ?>',
		iconCls: 'delete',
		handler: function() {
                    Ext.MessageBox.show({
                        title: '<?php echo $this->translate('Delete quote'); ?>',
                        msg: '<?php echo $this->translate('Are you sure to delete the selected quote?'); ?>',
			buttons: Ext.MessageBox.YESNO,
			fn: function(result) {
                            if (result == 'yes') {
                                Ext.Ajax.request({
                                    url: '<?php echo $this->url(array('paction' => 'delete')); ?>',
				    success: function(response, opts) {
                                        var rsp = Ext.decode(response.responseText);
				        if (rsp.success) {
                                            Ext.aitsu.msg('<?php echo Aitsu_Translate :: translate('Quote removed'); ?>', '<?php echo Aitsu_Translate :: translate('The selected quote has been removed.'); ?>');
                                             grid.getStore().load(); 
				        }
				    },
				    params: {
                                        id: record.get('id')
                                    }
				});					 			
                            }
                        }
                    });			 			         
		}
            });
            
            menu.showAt(quote.getXY());
        }
    }
});
	
Ext.getCmp('quotes-plugin-center').add(quotesGrid);