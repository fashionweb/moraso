"Main":../../index.textile

h1. Modules

A module is a class producing a content fragment that is placed into the resulting page during the rendering phase. It may produce arbitrary HTML code, which may contain references to other modules. Even a recursive call of itself is possible, as long as you implement a breaking rule to prevent the system from looping endlessly.

h2. Module call

The module is called with one of the following two references:

bc. _[My.Module.Name:Index]

This is the easy way usually used in text editors in the edit mode. As long as there is no need to configure the module programmatically, this call may be used.

If referenced from within a template or a module, most often the module has to be configured dynamically. The recommended reference looks like:

bc. <script type="application/x-aitsu" src="My.Module.Name:Index">
    paramA = My first parameter
    paramB = My second parameter
</script>

The provided index is used to distinguish between different calls of the same module within the page's context and must be provided if you allow to configure the module in the edit mode.

The index as well as the parameters are available in the modules context as...

bc. $this->_index

and

bc. $this->_params

along with the page's context, the module is embedded in.

h2. The class

The module's file name is always _Class.php_ and the class's name must correspond with its location in the file system. Modules must reside in one of the following two locations:

* /application/modules/{module name or path} or
* /application/skins/{skin name}/modules/{module name or path}

A module in _/application/modules/My/Module/Name_ must be named as:

bc. Module_My_Module_Name_Class

and is referenced as _My.Module.Name:Index_.

The same module in _/application/skins/{skin name}/module/My/Module/Name_ must be named as:

bc. Skin_Module_My_Module_Name_Class

and is referenced exactly the same way. This means that you may overwrite an existing module with a skin specific module. The system uses the skin module if available. Otherwise the one available in _/application/modules/_ is used.

The class must implement either Aitsu_Module_Abstract or Aitsu_Module_Tree_Abstract and the class in its simplest form then looks like:

bc. <?php
class Module_HelloWorld_Class extends Aitsu_Module_Abstract {
	protected function _main() {
		return 'Hello World!';
	}
}

h3. _main()

The main method is called when the module is executed (called from a template or another module). It is (usually) expected to return a HTML fragment. However, it is not limited to that purpose. You also may decide to flush the buffer, send other headers, return arbitrary text or binary content and halt the execution of the script as a whole.

As mentioned above the index used when calling the module as well as the given parameters (if any) are available within the class's context ==(_index and _params members)==. You have also available the page's context from the registry (Aitsu_Registry) as well as the configuration (Aitsu_Config) and the library (e.g. Aitsu_Db to make database calls).

Be aware that the main method is executed only, if there is no valid cache available. This is the case when at least one of the following conditions is met:

# The caching period is set to 0 (default);
# you are logged in and the module's _cacheIfLoggedIn member is set to false;
# the cache is outdated and no longer valid;
# or the cache has been cleared.

If you expect the code to be executed regardless whether or not the cache is valid, use the _init method instead.

h3. _init()

The init method is identical to the main method, except that it is executed always, even if a valid cache is available. Both methods may return content which is just glued together (the init's return in front of the main's content). Usually you use either only the main method or both. To use the init method solely does not make sense.

The init method is especially useful in following scenarios:

* Some code has to be executed regardless of the cache's state, while other content may be provided from cache. E.g. the code should update rows in a database table while the actual output remains the same.
* You want to inject javascript code or references into the layout using ==Aitsu_Util_Javascript==, while the visible content may be taken from cache. 

h3. _cachingPeriod()

The method returns zero by default, which is disabling the cache for this particular module. The value may be set dynamically using information available during runtime or statically. It should return an integer value representing the period in seconds the resulting cache has to be expected to be valid. During this period (beginning from the point of execution) the main method will not be executed and the cache is used instead which has been returned by the main method when executed the last time.

h3. _getView()

Following call returns a Zend view with the template path the to the modules location:

bc. $this->_getView();

To render a view and to embed the result into the page following call can be made either in the _init() or the _main() method of the class:

bc. $view->_getView();
// Set arbitrary data to be available in the view's context.
$view->data = $data;
return $view->render('template.phtml'); 